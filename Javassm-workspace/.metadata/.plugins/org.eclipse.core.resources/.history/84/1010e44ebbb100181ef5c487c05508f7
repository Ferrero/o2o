package com.imooc.o2o.web.shopadmin;

import java.awt.Image;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.multipart.commons.CommonsMultipartFile;
import org.springframework.web.multipart.commons.CommonsMultipartResolver;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.imooc.o2o.dao.ProductDao;
import com.imooc.o2o.dto.ImageHolder;
import com.imooc.o2o.dto.ProductExecution;
import com.imooc.o2o.entity.Product;
import com.imooc.o2o.entity.ProductCategory;
import com.imooc.o2o.entity.Shop;
import com.imooc.o2o.enums.ProductStateEnum;
import com.imooc.o2o.service.ProductCategoryService;
import com.imooc.o2o.service.ProductService;
import com.imooc.o2o.util.CodeUtil;
import com.imooc.o2o.util.HttpServletRequestUtil;
import com.imooc.o2o.util.ImageUtil;

import exceptions.ProductOperationException;

/**
* @author xf
* @version 2018年8月24日 上午11:45:09
*/
@Controller
@RequestMapping("/shopadmin")
public class ProductManagementController {
	@Autowired
	private ProductService productService;
	@Autowired
	private ProductCategoryService productCategoryService;
	
	//支持上传图片详情图的最大数量
	private static final int IMAGEMAXCOUNT = 6;

	  /**
     * 
     * 
     * @Title: addProduct
     * 
     * @Description: 1. 验证码校验
     * 
     *               2. 接收前端参数：包括 商品、 商品缩略图、商品详情图片实体类
     * 
     *               前端页面通过post方式传递一个包含文件上传的Form会以multipart/form-data请求发送给服务器，
     * 
     *               需要告诉DispatcherServlet如何处理MultipartRequest，我们在spring-web.
     *               xml中定义了multipartResolver。
     * 
     *               如果某个Request是一个MultipartRequest，它就会首先被MultipartResolver处理，
     *               然后再转发相应的Controller。
     * 
     *               在Controller中，
     *               将HttpServletRequest转型为MultipartHttpServletRequest
     *               ，可以非常方便的得到文件名和文件内容
     * 
     * @param request
     * 
     * @return: Map<String,Object>
     * 
     *          注解@ResponseBody 负责将返回的map对象转换为JSON,供前端使用
     */
	@RequestMapping(value="/addproduct", method = RequestMethod.POST)
	@ResponseBody
	public Map<String, Object> addProduct(HttpServletRequest request,HttpServletResponse response){
		Map<String, Object> modelMap = new HashMap<String, Object>();
		//Step1:验证校验码
		if(!CodeUtil.checkVerifyCode(request)) {
			modelMap.put("success", false);
			modelMap.put("errMsg", "输入错误的验证码");
			return modelMap;
		}
		//Step2:接受前端参数的变量的初始化，包括商品，缩略图，详情图列表实体类
		
		/*ObjectMapper类是jackson的主要类，主要用来实现java类和json对象之间的转换
		      构造ObjectMapper实例
		*/
		ObjectMapper mapper = new ObjectMapper();
		// 接收前端传递过来的product
		Product product = null;
		// 从request获取前端传递过来（由json转化成String的productStr）的商品信息,约定好使用productStr
		String productStr = HttpServletRequestUtil.getString(request, "productStr");
		//处理文件流请求
		MultipartHttpServletRequest multipartRequest = null;
		// 商品图片缩略图（输入流和名称的封装类）
		ImageHolder thumbnail = null;
		// 接收商品详情图片文件流列表和对应的名字列表
		List<ImageHolder> productImgList = new ArrayList<ImageHolder>();
		//CommonsMultipartResolver:文件上传解析器（mvc中配置），可以 实现多文件上传。从request的本次会话中的上下文中获取图片。
		CommonsMultipartResolver mulpartResolver = new CommonsMultipartResolver(
				request.getSession().getServletContext());
		
	
		//Step3: 商品缩略图 和 商品详情图 构造service层需要调用的参数
		try {
			//若请求中存在文件流，则取出相关的文件（包括缩略图和详情图）
			if(mulpartResolver.isMultipart(request)) {
				//将HttpServletRequest转型为MultipartHttpServletRequest，
				//可以很方便地取出文件名和文件内容
				multipartRequest = (MultipartHttpServletRequest) request;
				//取出缩略图，和前端约定好使用thumbnail进行传递
				//CommonsMultipartFile中可以直接得到文件流
				CommonsMultipartFile thumbnailFile = (CommonsMultipartFile) multipartRequest.getFile("thumbnail");
				//并构建ImageHolder对象;getOriginalFilename()获得文件名，getInputStream()获得输入流
				thumbnail = new ImageHolder(thumbnailFile.getOriginalFilename(), thumbnailFile.getInputStream());
				//取出详情图列表并构建List<ImageHolder>列表对象，最多支持六张图片上传
				for(int i = 0 ; i < IMAGEMAXCOUNT; i++) {
					CommonsMultipartFile productImgFile = (CommonsMultipartFile) multipartRequest.
							getFile("productImg" + i); 
					if(productImgFile != null) {
						ImageHolder productImg = new ImageHolder(productImgFile.getOriginalFilename(),productImgFile.getInputStream());
						productImgList.add(productImg);
					}else {
						//若取出的第i个详情图片文件流为空，则终止循环
						break;
					}
				}
			}else {
				modelMap.put("success", false);
				modelMap.put("errMsg", "上传图片不能为空");
				return modelMap;
			}
		}catch(Exception e) {
			modelMap.put("success", false);
			modelMap.put("errMsg", e.toString());
			return modelMap;
		} 
		
		try {
			//尝试获取前端传过来的表单String流并将其转换成Product实体类
			product = mapper.readValue(productStr, Product.class);
		}catch(Exception e) {
			modelMap.put("success", false);
			modelMap.put("errMsg", e.toString());
			return modelMap;
		}
		
		// Step4 调用Service层
		//若product信息，缩略图以及详情图片列表为非空，则开始进行商品添加操作
		if(product != null && thumbnail != null && productImgList.size() >0) {
			try {
				//从session中获取当前店铺的Id并赋值给product，减少对前端数据的依赖
				Shop currentShop = (Shop) request.getSession().getAttribute("currentShop");
				product.setShop(currentShop);
				//执行添加操作
				ProductExecution pe = productService.addProduct(product, thumbnail, productImgList);
				if(pe.getState() == ProductStateEnum.SUCCESS.getState()) {
					modelMap.put("success", true);
				}else {
					modelMap.put("success", false);
					modelMap.put("errMsg", pe.getStateInfo());
				}
			}catch(ProductOperationException e) {
				modelMap.put("success", false);
				modelMap.put("errMsg", e.toString());
				return modelMap;
			}
		}else {
			modelMap.put("success", false);
			modelMap.put("errMsg", "请输入商品信息");
		}
		return modelMap;
	}
	
	@RequestMapping(value = "/getproductInfo", method = RequestMethod.GET)
	@ResponseBody
	public Map<String, Object> getProductInfo(Long productId,HttpServletRequest request){
		Map<String, Object> modelMap = new HashMap<String, Object>();
		/*Shop currentShop = (Shop) request.getSession().getAttribute("currentshop");
		Product product = new Product();
		product.setShop(currentShop);*/
		try {
			Product product = productService.queryProductById(productId);
			modelMap.put("success", true);
			modelMap.put("product", product);
		}catch(Exception e){
			modelMap.put("success", false);
			modelMap.put("errmsg", e.getMessage());
		}
		return modelMap;
		
	}
	@RequestMapping(value = "/getproductbyid", method = RequestMethod.GET)
	@ResponseBody
	private  Map<String, Object> getProductById(@RequestParam("productId") Long productId){
		Map<String, Object> modelMap = new HashMap<String, Object>();
			//非空判断
			if(productId > -1) {
				//获取商品信息
				Product product = productService.queryProductById(productId);
				//获取该店铺下的商品类别列表
				
				List<ProductCategory> productCategoryList = productCategoryService
						.getProductCategoryList(product.getShop().getShopId());
				modelMap.put("product", product);
				modelMap.put("productCategoryList", productCategoryList);
				modelMap.put("success", true);
			}else {
			modelMap.put("success", false);
			modelMap.put("errmsg", "empty productId");
		}
		return modelMap;
	}
	
	@RequestMapping(value = "/modifyproduct", method = RequestMethod.POST)
	@ResponseBody
	private Map<String, Object> modifyProduct(HttpServletRequest request){
		Map<String, Object> modelMap= new HashMap<String, Object>();
		
		//是商品编辑时候调用还是上下架操作的时候调用
		//若为前者则进行验证码判断，后者则跳过验证码判断
		boolean statusChange = HttpServletRequestUtil.getBoolean(request, "statusChange");
		//验证码判断
		if(!statusChange && !CodeUtil.checkVerifyCode(request)) {
			modelMap.put("success", false);
			modelMap.put("errMsg", "输入了错误的验证码");
		}
		ObjectMapper mapper = new ObjectMapper();
		Product product = null;
		ImageHolder thumbnail = null;
		List<ImageHolder> productImgList = new ArrayList<ImageHolder>();
		CommonsMultipartResolver multipartResolver = new CommonsMultipartResolver(
				request.getSession().getServletContext());
		//若文件中存在文件流，则取出相关的文件(包括缩略图和详情图)
		try {
			if(multipartResolver.isMultipart(request)) {
				thumbnail = handleImage(request, thumbnail, productImgList);
			}
		}catch(Exception e) {
				modelMap.put("success", false);
				modelMap.put("errMsg", e.toString());
				return modelMap;
		}
			try {
				String productStr = HttpServletRequestUtil.getString(request, "productStr");
				//尝试获取前端传过来的表单string流并将其转换成Product实体类
				 product = mapper.readValue(productStr, Product.class);
			}catch(Exception e) {
				modelMap.put("success", false);
				modelMap.put("errMsg", e.toString());
			}
			if(product != null) {
				try {
					Shop currentShop = (Shop) request.getSession().getAttribute("currentShop");
					product.setShop(currentShop);
					//开始进行商品变更信息的操作
					ProductExecution pe = productService.updateProduct(product, thumbnail, productImgList);
					if(pe.getState() == ProductStateEnum.SUCCESS.getState()) {
						modelMap.put("success", true);
					}else {
						modelMap.put("success", false);
						modelMap.put("errMsg", pe.getStateInfo());
					}
				}catch(ProductOperationException e) {
					modelMap.put("success", false);
					modelMap.put("errMsg", e.toString());
					return modelMap;
				}
			}
			return modelMap;
		}
	
	//从新增和修改方法中提取相同的方法--重构处理图片的方法
	private ImageHolder handleImage(HttpServletRequest request, ImageHolder thumbnail, List<ImageHolder> productImgList)
			throws IOException {
		MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;
		//取出缩略图并构建ImageHolder对象
		CommonsMultipartFile thumbnailFile = (CommonsMultipartFile) multipartRequest
				.getFile("thumbnail");
		if(thumbnailFile != null) {
			thumbnail = new ImageHolder(thumbnailFile.getOriginalFilename(), thumbnailFile.getInputStream());
		}
		//取出详情图列表并构建List<ImageHolder>列表对象，最多支持六张图片上传
		for(int i = 0;i < IMAGEMAXCOUNT; i++) {
			CommonsMultipartFile productImgFile = (CommonsMultipartFile) multipartRequest
					.getFile("productImg" + i);
			if(productImgFile != null){
				ImageHolder productImg = new ImageHolder(productImgFile.getOriginalFilename(), productImgFile.getInputStream());
				productImgList.add(productImg);
			}else {
				break;
			}
		}
		return thumbnail;
	}
	
	@RequestMapping(value = "/queryProductList", method = RequestMethod.GET)
	@ResponseBody
	private Map<String, Object> queryProductList(HttpServletRequest request){
		Map<String, Object> modelMap = new HashMap<String, Object>();
		//获取前台传过来的页码
		int pageIndex = HttpServletRequestUtil.getInt(request, "pageIndex");
		//获取前台传过来的每页要求返回的商品数上限
		int pageSize = HttpServletRequestUtil.getInt(request, "pageSize");
		//从当前session中获取店铺信息，主要获取shopId
		 Shop currentShop = (Shop) request.getSession().getAttribute("currentShop");
		 //空值判断
		 if((pageIndex > -1) && (pageSize > -1) && (currentShop != null) && (currentShop.getShopId() != null)) {
			 //获取传入的需要检索的条件，包括是否需要从某个商品类别以及模糊查找商品名去筛选某个店铺下的商品列表
			 //筛选的条件
			 Long productCategoryId = HttpServletRequestUtil.getLong(request, "productCategoryId");
			 String productName = HttpServletRequestUtil.getString(request, "productName");
			 Product productCondition = compactProductCondition(currentShop.getShopId(), productCategoryId, productName);
			 //传入查询条件以及分页信 息进行查询，返回相应商品列表及总数
			 ProductExecution pe = productService.queryProductListById(productCondition, pageIndex, pageSize);
			 modelMap.put("productList", pe.getProductList());
			 modelMap.put("count", pe.getProduct());
			 modelMap.put("success", true);
		 }else {
			 modelMap.put("success", false);
			 modelMap.put("errMsg", "empty pageSize or pageIndex or shopId");
		 }
		 return modelMap;
	}
	
	private Product compactProductCondition(Long shopId, Long productCategoryId, String productName) {
		Product productCondition = new Product();
		Shop shop = new Shop();
		shop.setShopId(shopId);
		productCondition.setShop(shop);
		//若有指定类别的要求则添加进去
		if(productCategoryId != -1L) {
			ProductCategory productCategory = new ProductCategory();
			productCategory.setProductCategoryId(productCategoryId);
			productCondition.setProductCategory(productCategory);
		}
		//若有商品模糊查询的要求则添加进去
		if(productName != null) {
			productCondition.setProductName(productName);
		}
		return productCondition;
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
/*	private Map<String, Object> queryProductList(HttpServletRequest request){
		Map<String, Object> modelMap = new HashMap<String, Object>();
		Shop currentShop = (Shop) request.getSession().getAttribute("currentShop");
		List<Product> productList = productService.queryProductListById(currentShop.getShopId());
		modelMap.put("success", true);
		modelMap.put("productList", productList);
		return modelMap;
	
	}*/
	
}
